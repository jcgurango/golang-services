// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "ledger/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	RegisterEndpoint        endpoint.Endpoint
	AuthenticateEndpoint    endpoint.Endpoint
	NewAccountEndpoint      endpoint.Endpoint
	GetAccountsEndpoint     endpoint.Endpoint
	NewTransactionEndpoint  endpoint.Endpoint
	GetBalanceEndpoint      endpoint.Endpoint
	GetTransactionsEndpoint endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.LedgerService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		AuthenticateEndpoint:    MakeAuthenticateEndpoint(s),
		GetAccountsEndpoint:     MakeGetAccountsEndpoint(s),
		GetBalanceEndpoint:      MakeGetBalanceEndpoint(s),
		GetTransactionsEndpoint: MakeGetTransactionsEndpoint(s),
		NewAccountEndpoint:      MakeNewAccountEndpoint(s),
		NewTransactionEndpoint:  MakeNewTransactionEndpoint(s),
		RegisterEndpoint:        MakeRegisterEndpoint(s),
	}
	for _, m := range mdw["Register"] {
		eps.RegisterEndpoint = m(eps.RegisterEndpoint)
	}
	for _, m := range mdw["Authenticate"] {
		eps.AuthenticateEndpoint = m(eps.AuthenticateEndpoint)
	}
	for _, m := range mdw["NewAccount"] {
		eps.NewAccountEndpoint = m(eps.NewAccountEndpoint)
	}
	for _, m := range mdw["GetAccounts"] {
		eps.GetAccountsEndpoint = m(eps.GetAccountsEndpoint)
	}
	for _, m := range mdw["NewTransaction"] {
		eps.NewTransactionEndpoint = m(eps.NewTransactionEndpoint)
	}
	for _, m := range mdw["GetBalance"] {
		eps.GetBalanceEndpoint = m(eps.GetBalanceEndpoint)
	}
	for _, m := range mdw["GetTransactions"] {
		eps.GetTransactionsEndpoint = m(eps.GetTransactionsEndpoint)
	}
	return eps
}
